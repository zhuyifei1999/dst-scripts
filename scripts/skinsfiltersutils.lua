require("skinsutils")

-- Utility functions to be used by any widget or screen that 
-- requires filtered subsets of a skins list.
-- The widget must pass itself in as the owner parameter.
-- The widget must contain owner.full_skins_list, which will be filtered into owner.skins_list.
-- (In most cases, the skins list should be generated by GetSortedSkinsList() which is in skinsutils.lua)
-- The widget must also contain a BuildInventoryList function that takes a skins_list

-- Call this function to initialize required tables 
--[[function InitFilters(owner, skins_list)
	owner.applied_filters = {}
	owner.full_skins_list = skins_list
	owner.skins_list = nil

	--print("Set filters data", owner.applied_filters, owner.full_skins_list, owner.skins_list)
end]]

--[[function ClearFilters(owner)
	--print("Clearing filters")
	--owner.filters:ClearAllSelections() -- This is to reset the dropdown widget
	owner.applied_filters = {}
end]]

local typeList = {}
typeList[STRINGS.UI.SKINSSCREEN.BASE] = "base" 
typeList[STRINGS.UI.SKINSSCREEN.BODY] = "body" 
typeList[STRINGS.UI.SKINSSCREEN.HAND] = "hand"
typeList[STRINGS.UI.SKINSSCREEN.LEGS] = "legs" 
typeList[STRINGS.UI.SKINSSCREEN.FEET] = "feet" 
typeList[STRINGS.UI.SKINSSCREEN.ITEM] = "item"
				
local rarityList = {}
rarityList[STRINGS.UI.SKINSSCREEN.COMMON] = STRINGS.UI.SKINSSCREEN.COMMON
rarityList[STRINGS.UI.SKINSSCREEN.CLASSY] = STRINGS.UI.SKINSSCREEN.CLASSY
rarityList[STRINGS.UI.SKINSSCREEN.SPIFFY] = STRINGS.UI.SKINSSCREEN.SPIFFY
rarityList[STRINGS.UI.SKINSSCREEN.DISTINGUISHED] = STRINGS.UI.SKINSSCREEN.DISTINGUISHED
rarityList[STRINGS.UI.SKINSSCREEN.ELEGANT] = STRINGS.UI.SKINSSCREEN.ELEGANT
rarityList[STRINGS.UI.SKINSSCREEN.TIMELESS] = STRINGS.UI.SKINSSCREEN.TIMELESS
rarityList[STRINGS.UI.SKINSSCREEN.LOYAL] = STRINGS.UI.SKINSSCREEN.LOYAL


-- Apply a list of filters
function ApplyFilters(full_skins_list, filters)
	local filtered_list = {}

	for _,skin_item in ipairs(full_skins_list) do 
		for _,filter_name in pairs( filters ) do
			if filter_name == STRINGS.UI.SKINSSCREEN.NONE then --TODO(Peter): change to not use the strings table for filter names, as translations could break it.
				filtered_list = CopySkinsList(full_skins_list)
				return filtered_list
			else
				local filter_type = ""
				if typeList[filter_name] then
					filter_type = typeList[filter_name]
				elseif rarityList[filter_name] then 
					filter_type = rarityList[filter_name]
				end

				-- For each item in the full list, if it matchs a filter then put it on the list of things to display.
				-- This method preserves the original order.
				if skin_item.type == filter_type then
					table.insert(filtered_list, skin_item)
				elseif GetRarityForItem(skin_item.type, skin_item.item) == filter_type then
					table.insert(filtered_list, skin_item)
				end
			end
		end
	end
	
	return filtered_list
end


--[[function RemoveFilter(owner, filter)
	--print("Removing filter ", filter)
	if filter and typeList[filter] then
		filter = typeList[filter]
	elseif filter and rarityList[filter] then 
		filter = rarityList[filter]
	end


	local applied_filters = {}
	for k,v in ipairs(owner.applied_filters) do
		if v ~= filter then 
			table.insert(applied_filters, v)
		end
	end

	owner.applied_filters = applied_filters
	if not owner.applied_filters then 
		owner.applied_filters = {}
	end

	--print("Dumping applied_filters table:")
	--dumptable(owner.applied_filters)
	ApplyFilter(nil)
end]]
